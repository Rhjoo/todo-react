{"version":3,"sources":["TodoForm.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","event","preventDefault","task","todo","this","value","completed","props","addTodo","todoForm","reset","_this","react_default","a","createElement","className","ref","input","onSubmit","createTodo","type","placeholder","React","Component","TodoItem","onClick","deleteTodo","index","TodoList","Object","keys","todos","map","key","src_TodoItem","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","objectSpread","timestamp","Date","now","concat","setState","src_TodoForm","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QA0BeA,qLAvBFC,GACTA,EAAMC,iBACN,IAAMC,EAAO,CACXC,KAAMC,KAAKD,KAAKE,MAChBC,WAAW,GAEbF,KAAKG,MAAMC,QAAQN,GACnBE,KAAKK,SAASC,yCAGP,IAAAC,EAAAP,KACP,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,QAAME,IAAK,SAACC,GAAD,OAAWN,EAAKF,SAAWQ,GAAOC,SAAU,SAAClB,GAAD,OAAWW,EAAKQ,WAAWnB,KAChFY,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOJ,IAAK,SAACC,GAAD,OAAWN,EAAKR,KAAOc,GAAOI,YAAY,mBAClET,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,kBAhBaE,IAAMC,WCUdC,EAVE,SAACjB,GAChB,OACEK,EAAAC,EAAAC,cAAA,UACGP,EAAML,KAAKC,KACZS,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,UAAQW,QAAS,kBAAMlB,EAAMmB,WAAWnB,EAAMoB,SAA9C,YCISC,EARE,SAACrB,GAChB,OACEK,EAAAC,EAAAC,cAAA,UACGe,OAAOC,KAAKvB,EAAMwB,OAAOC,IAAI,SAAAC,GAAG,OAAIrB,EAAAC,EAAAC,cAACoB,EAAD,CAAUD,IAAKA,EAAKN,MAAOM,EAAK/B,KAAMK,EAAMwB,MAAME,GAAMP,WAAYnB,EAAMmB,iBCgCtGS,qBAhCb,SAAAA,IAAc,IAAAxB,EAAA,OAAAkB,OAAAO,EAAA,EAAAP,CAAAzB,KAAA+B,IACZxB,EAAAkB,OAAAQ,EAAA,EAAAR,CAAAzB,KAAAyB,OAAAS,EAAA,EAAAT,CAAAM,GAAAI,KAAAnC,QACKI,QAAUG,EAAKH,QAAQgC,KAAbX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAlB,KACfA,EAAKe,WAAaf,EAAKe,WAAWc,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAlB,KAClBA,EAAK+B,MAAQ,CACXX,MAAO,IALGpB,uEASNT,GACN,IAAM6B,EAAKF,OAAAc,EAAA,EAAAd,CAAA,GAAOzB,KAAKsC,MAAMX,OACvBa,EAAYC,KAAKC,MACvBf,EAAK,QAAAgB,OAASH,IAAe1C,EAC7BE,KAAK4C,SAAS,CAAEjB,6CAGP7B,GACT,IAAM6B,EAAKF,OAAAc,EAAA,EAAAd,CAAA,GAAOzB,KAAKsC,MAAMX,cACtBA,EAAM7B,GACbE,KAAK4C,SAAS,CAAEjB,2CAIhB,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,CAAUzC,QAASJ,KAAKI,UACxBI,EAAAC,EAAAC,cAACoC,EAAD,CAAUnB,MAAO3B,KAAKsC,MAAMX,MAAOL,WAAYtB,KAAKsB,qBA3B1CJ,IAAMC,YCOJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3dd0e094.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoForm extends React.Component {\n  createTodo(event) {\n    event.preventDefault();\n    const task = {\n      todo: this.todo.value,\n      completed: false\n    }\n    this.props.addTodo(task);\n    this.todoForm.reset();\n  }\n\n  render() {\n    return (\n      <div className=\"todoList\">\n        <form ref={(input) => this.todoForm = input} onSubmit={(event) => this.createTodo(event)}>\n          <input type=\"text\" ref={(input) => this.todo = input} placeholder=\"somthing to do\" />\n          <button type=\"submit\">Enter</button>\n        </form>\n      </div>\n    );\n    \n  }\n}\n\nexport default TodoForm;","import React from 'react';\n\nconst TodoItem = (props) => {\n  return (\n    <li>\n      {props.task.todo}\n      <span> </span>\n      <button onClick={() => props.deleteTodo(props.index)}>Remove</button>\n    </li>\n  );\n};\n\nexport default TodoItem;","import React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoList = (props) => {\n  return (\n    <ul>\n      {Object.keys(props.todos).map(key => <TodoItem key={key} index={key} task={props.todos[key]} deleteTodo={props.deleteTodo} />)}\n    </ul>\n  );\n};\n\nexport default TodoList;","import React from 'react';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.state = {\n      todos: {}\n    };\n  }\n  \n  addTodo(task) {\n    const todos = {...this.state.todos};\n    const timestamp = Date.now();\n    todos[`todo-${timestamp}`] = task;\n    this.setState({ todos });\n  }\n  \n  deleteTodo(task) {\n    const todos = {...this.state.todos};\n    delete todos[task];\n    this.setState({ todos });\n  }\n\n  render() {\n    return (\n      <div>\n        <TodoForm addTodo={this.addTodo} />\n        <TodoList todos={this.state.todos} deleteTodo={this.deleteTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}