{"version":3,"sources":["TodoForm.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","react_default","a","createElement","className","onSubmit","handleSubmit","type","value","userInput","placeholder","name","onChange","handleChange","TodoItem","task","onClick","deleteTodo","index","TodoList","todos","map","item","src_TodoItem","key","id","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","createTodo","event","target","setState","preventDefault","reset","copyOfTodosState","toConsumableArray","newTodo","timestamp","Date","now","concat","push","indexToDelete","findIndex","splice","src_TodoForm","src_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4eaee49.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TodoForm (props) {\n  return (\n    <div className=\"todoList\">\n      <form onSubmit={props.handleSubmit}> \n        <input type=\"text\" value={props.userInput} placeholder=\"something to do\" name=\"todos\" onChange={props.handleChange}/>\n        <button type=\"submit\">Enter</button>\n      </form>\n    </div>\n  );\n}\n\nexport default TodoForm;","import React from 'react'\n\nfunction TodoItem(props) {\n  return (\n    <li>\n      {props.task}\n      <span> </span>\n      <button onClick={() => props.deleteTodo(props.index)}>Remove</button>\n    </li>\n  )\n}\n\nexport default TodoItem\n","import React from 'react'\nimport TodoItem from './TodoItem'\n\nfunction TodoList(props) {\n  return (\n    <div>\n      {props.todos.map(item => <TodoItem key={item.id} index={item.id} task={item.task} deleteTodo={props.deleteTodo}/>)}\n    </div>\n  )\n}\n\nexport default TodoList","\nimport React, { Component } from 'react';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userInput: \"\",\n      todos: []\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.createTodo = this.createTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n  }\n  \n  handleChange(event) {\n    const { value } = event.target\n    this.setState({ userInput: value })\n  }\n  \n  handleSubmit(event) {\n    event.preventDefault()\n    this.createTodo()\n    this.setState({ userInput: \"\" })\n    event.target.reset()\n  }\n\n  createTodo() {\n    const copyOfTodosState = [...this.state.todos]\n    const newTodo = {}\n    const timestamp = Date.now()\n    newTodo.id =`task-${timestamp}`\n    newTodo.task = this.state.userInput\n    copyOfTodosState.push(newTodo)\n    this.setState({ todos: copyOfTodosState })\n  }\n\n  deleteTodo(index) {\n    const copyOfTodosState = [...this.state.todos]\n    const indexToDelete = copyOfTodosState.findIndex(item => item.id === index)\n    copyOfTodosState.splice(indexToDelete, 1)\n    this.setState({ todos: copyOfTodosState });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoForm handleChange={this.handleChange} handleSubmit={this.handleSubmit} userInput={this.state.userInput}/>\n        <TodoList todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}